@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root("::-webkit-input-placeholder") {
    @content;
  }

  @include optional-at-root(":-moz-placeholder") {
    @content;
  }

  @include optional-at-root("::-moz-placeholder") {
    @content;
  }

  @include optional-at-root(":-ms-input-placeholder") {
    @content;
  }
}

@mixin hover($parent: null, $touch: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");
  $touchMod: null;

  @if (not $touch) {
    $touchMod: "html:not(.touch)";
  }

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
         @content;
      }
    }
  } @else if ($parent) {
    #{$touchMod} #{$parent}:hover & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    #{$touchMod} &:hover {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }
  } @else { //not $parent and not $isPseudo
    #{$touchMod} &:hover {
      @content;
    }
  }
}

@mixin active($parent: null, $class: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
        @debug $selector;

         @content;
      }
    }
  } @else if $parent {
    #{$parent}:active &,
    #{$parent}--active & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    &:active {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }

  } @else { //not $parent and not $isPseudo
    &:active,
    &--active
    {
      @content;
    }
  }
}

@mixin focus($parent: null, $onlyTouch: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");
  $touchMod: null;

  @if ($onlyTouch) {
    $touchMod: "html.touch";
  }

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
        @debug $selector;

         @content;
      }
    }
  } @else if $parent {
    #{$touchMod} #{$parent}:focus & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    #{$touchMod} &:focus {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }
  } @else { //not $parent and not $isPseudo
    #{$touchMod} &:focus {
      @content;
    }
  }
}

@mixin container {
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--container-padding-x);
  padding-left: var(--container-padding-x);
  min-width: 300px;
  box-sizing: border-box;

  @include media-breakpoint-up(sm) {
    --container-padding-x: 40px;

    padding-right: var(--container-padding-x);
    padding-left: var(--container-padding-x);
  }

  @include media-breakpoint-up(md) {

  }

  @include media-breakpoint-up(lg) {
    max-width: 1042px;
  }

  @include media-breakpoint-up(xl) {
    //max-width: 1042px;
  }

  @include media-breakpoint-up(xxl) {
    //max-width: 1090px;
  }
}

@mixin list-clear {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin btn-default {
  margin: 0;
  padding: 0;
  background: none;
  border: none;
  cursor: pointer;

  @include focus {
    outline: none;
  }
}

@mixin clear-link-outline {
  outline: 0;

  &:focus,
  &:active,
  &:hover,
  &:link,
  &:visited {
    outline: 0;
  }
}

@mixin link {
  @include clear-link-outline();

  position: relative;
  //display: inline-block;
  font-family: $font-family;
  font-size: 14px;
  font-weight: 500;
  line-height: 30px;
  letter-spacing: -0.16px;
  color: var(--blue-dark-color);
  text-decoration: none;
  cursor: pointer;
  //border-bottom: 1px solid var(--blue-dark-color);

  @-moz-document url-prefix() {

    &::before {
      bottom: -5px;
    }
  }
}

@mixin close-btn() {
  @include btn-default();

  --btn-size: 38px;

  width: var(--btn-size);
  height: var(--btn-size);
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid rgba(#000000, 0.25);
  border-radius: 50%;
  transition: all 0.25s;
  cursor: pointer;

  @include hover {
    border-color: rgba(#000000, 0.6);
    background-color: rgba(#000000, 0.04);
  }

  svg {
    pointer-events: none;
  }
}

@mixin btn() {
  padding: 5px;
  width: 100%;
  max-width: 320px;
  height: 52px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  font-family: $font-family;
  font-size: 17px;
  font-weight: 500;
  line-height: 20px;
  letter-spacing: -0.2px;
  color: var(--blue-dark-color);
  text-transform: uppercase;
  text-decoration: none;
  border: 1px solid var(--blue-dark-color);
  border-radius: 40px;
  box-sizing: border-box;
  background-color: transparent;
  transition: background-color, color .3s;
  user-select: none;

  &:focus {
    outline: none;
  }

  @include hover {
    background-color: var(--blue-dark-color);
    color: var(--white-color);
  }
}


@mixin label {
  display: block;
  margin-bottom: 12px;
  padding: 4px 9px;
  align-self: flex-start;
  font-size: 11.4px;
  font-weight: 600;
  line-height: 16px;
  letter-spacing: 0.1px;
  color: var(--pink-dark-color);
  background-color: #ffdbf1;
  border-radius: 20px;

  @include media-breakpoint-up(sm) {
    align-self: center;
  }

  @include media-breakpoint-up(lg) {
    //align-self: flex-start;
  }
}
